library(swirl)
install.packages("swirl")
library(swirl)
library(swirl)
install.packages("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
library(swirl)
swirl()
swirl()
cd d:/
setwd d:/
setwd("D:/Program_Files/R")
plot( mpg ~ am, data = mtcars,
main = "MPG by Transmission type",
xlab = "Transmission", ylab = "Miles per gallon",
col = c("red", "green"))
boxplot( mpg ~ am, data = mtcars,
main = "MPG by Transmission type",
xlab = "Transmission", ylab = "Miles per gallon",
col = c("red", "green") )
boxplot( mpg ~ am, data = mtcars,
main = "MPG by Transmission type",
xlab = "Transmission", ylab = "Miles per gallon",
col = c("red", "blue") )
pairs(mtcars, panel = panel.smooth, main = "Pairs graph for MT Cars")
par(mfrow = c(2, 2))
plot(fitted(model), residuals(model), xlab = "Fitted values", ylab = "Residuals", main = "Residuals vs Fitted")
abline(h = 0, col = "red")
qqnorm(residuals(model))
qqline(residuals(model), col = "red")
plot(fitted(model), sqrt(abs(rstandard(model))), xlab = "Fitted values", ylab = "Square Root of Standardized Residuals", main = "Scale-Location")
install.packages("lmtest")
install.packages("zoo")
install.packages("lmtest")
head(mtcars, n=3)
boxplot( mpg ~ am, data = mtcars,
main = "MPG by Transmission Type",
xlab = "Transmission Type", ylab = "Miles per gallon",
col = c("red", "blue"),
horizontal = TRUE
)
boxplot( mpg ~ am, data = mtcars,
main = "MPG by Transmission Type",
xlab = "Transmission Type", ylab = "Miles per gallon",
col = c("red", "blue"),
horizontal = FALSE
)
boxplot( mpg ~ am, data = mtcars,
main = "MPG by Transmission Type",
ylab = "Transmission Type", xlab = "Miles per gallon",
col = c("red", "blue"),
horizontal = FALSE
)
boxplot( mpg ~ am, data = mtcars,
main = "MPG by Transmission Type",
ylab = "Transmission Type", xlab = "Miles per gallon",
col = c("red", "blue"),
horizontal = TRUE
)
```{r fig.width = 10, fig.height = 6}
par(mfrow = c(2, 2))
plot(model)
file.edit('~/.Rprofile')
library(MASS)
dim(shuttle)
head(shuttle)
shuttle$newUse <- as.numeric(shuttle$use == "auto")
fit <- glm(newUse ~ as.factor(wind) - 1, data=shuttle, family="binomial")
odds <- exp(summary(fit)$coef)
odds[1] / odds[2]
fit <- glm(count ~ spray - 1, data=InsectSprays, family="poisson")
summary(fit)$coef
rate <- exp(coef(fit))
rate[1] / rate[2] # 0.9456522
x <- -5 : 5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54,
3.87, 4.97)
knotPoint <- c(0)
spline <- sapply(knotPoint, function(knot) (x > knot) * (x - knot))
xMatrix <- cbind(1, x, spline)
fit <- lm(y ~ xMatrix - 1)
yhat <- predict(fit)
yhat
slope <- fit$coef[2] + fit$coef[3]
slope # 1.013
plot(x, y)
lines(x, yhat, col=2)
R.version.string
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton
vyg
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
child ~ parent
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
fit$coef[1].
fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs,rhs)
varChild <- var(child)
varChild <- var(OSL)
varChild <- var(child)
varChild <- var(ols)
varChild <- var(galton)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, sum(varRes + varEst))
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit - accel)
mean(efit)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor( gpa_nor, gch_nor)
l_nor <- lm(varEst ~ varRes)
l_nor <- lm(gch_nor ~ gpa_nor)
lm(x~y)
fit <- lm(child ~ parent, galton)
sqrt(fit$residuals)/((n-2))
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
deviance(fit)/(n-2)
sqrt(deviance(fit)/(n-2))
mu <- galton$parent
mu <- mean(galton$child)
sTot <- sTot
sTot <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- dev(sTot)
sRes <- deviance(sTot)
sRes <- deviance(galton$child)
sRes <- deviance(galton$child)
sRes <- deviance(galton)
sRes <- deviance(fit
dewe
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r.squared
cor(galton$parent, galton$child)
cor(galton$parent,galton$child)^2
library(AppliedPredictiveModeling)
library(caret)
install.packages("AppliedPredictiveModeling,caret")
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis, predictors)
testIndex = createDataPartition(diagnosis, p=0.50, list=FALSE)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
install.packages("caret")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p=3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.9,
outcome=training$diagnosis)
preProc$rotation # 9
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p=3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.8,
outcome=training$diagnosis)
preProc$rotation # 9
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p=3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.8,
outcome=training$diagnosis)
preProc$rotation # 9
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(Superplasticizer, data=training) # OR
ggplot(data=training, aes(x=Superplasticizer)) + geom_histogram() + theme_bw()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p=3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
IL <- grep("^IL", colnames(training), value=TRUE)
ILpredictors <- predictors[, IL]
df <- data.frame(diagnosis, ILpredictors)
inTrain <- createDataPartition(df$diagnosis, p=3/4)[[1]]
training <- df[inTrain, ]
testing <- df[-inTrain, ]
modelFit <- train(diagnosis ~ ., method="glm", data=training)
predictions <- predict(modelFit, newdata=testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
acc1 <- C1$overall[1]
acc1 # Non-PCA Accuracy: 0.65
modelFit <- train(training$diagnosis ~ .,
method="glm",
preProcess="pca",
data=training,
trControl=trainControl(preProcOptions=list(thresh=0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
acc2 <- C2$overall[1]
acc2 # PCA Accuracy: 0.72
acc2
print(C2)
acc2 <- C2$overall[1]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p=3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
IL <- grep("^IL", colnames(training), value=TRUE)
ILpredictors <- predictors[, IL]
df <- data.frame(diagnosis, ILpredictors)
inTrain <- createDataPartition(df$diagnosis, p=3/4)[[1]]
training <- df[inTrain, ]
testing <- df[-inTrain, ]
modelFit <- train(diagnosis ~ ., method="glm", data=training)
predictions <- predict(modelFit, newdata=testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
acc1 <- C1$overall[1]
acc1 # Non-PCA Accuracy: 0.65
require(e1071);
modelFit <- train(diagnosis ~ ., method="glm", data=training)
predictions <- predict(modelFit, newdata=testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
acc1 <- C1$overall[1]
acc1 # Non-PCA Accuracy: 0.65
install.packages("e1071")
require(e1071);
modelFit <- train(diagnosis ~ ., method="glm", data=training)
predictions <- predict(modelFit, newdata=testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
acc1 <- C1$overall[1]
acc1 # Non-PCA Accuracy: 0.65
modelFit <- train(training$diagnosis ~ .,
method="glm",
preProcess="pca",
data=training,
trControl=trainControl(preProcOptions=list(thresh=0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
acc2 <- C2$overall[1]
acc2 # PCA Accuracy: 0.72
setwd("D:/DOCs/COURSERA/8 - Practical Machine Learning/Coursera-Machine-Learning-CP")
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(corrplot)
train_file <- "./data/pml-training.csv"
test_file  <- "./data/pml-testing.csv"
if (!file.exists(train_file)) {
download.file( url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile = train_file )
}
if (!file.exists(test_file)) {
download.file( url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
destfile = test_file )
train_raw <- read.csv(train_file)
test_raw <- read.csv(test_file)
dim(train_raw)
dim(test_raw)
train_raw <- read.csv(train_file)
test_raw <- read.csv(test_filebhb)
dim(train_raw)
dim(test_raw)
bnb
mlm=
train_file <- "./data/pml-training.csv"
test_file  <- "./data/pml-testing.csv"
if (!file.exists(train_file)) {
download.file( url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile = train_file )
}
if (!file.exists(test_file)) {
download.file( url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
destfile = test_file )
}
train_raw <- read.csv(train_file)
test_raw <- read.csv(test_file)
dim(train_raw)
dim(test_raw)
head(train_raw)
head(test_raw)
sum(complete.cases(train_raw))
train_raw <- train_raw[, colSums(is.na(train_raw)) == 0]
test_raw <- test_raw[, colSums(is.na(test_raw)) == 0]
classe <- train_raw$classe
train_remove <- grepl("^X|timestamp|window", names(train_raw))
train_raw <- train_raw[, !train_remove]
train_clean <- train_raw[, sapply(train_raw, is.numeric)]
train_clean$classe <- classe
test_remove <- grepl("^X|timestamp|window", names(test_raw))
test_raw <- test_raw[, !test_remove]
test_clean <- test_raw[, sapply(test_raw, is.numeric)]
set.seed(33777) # For reproducibile purpose
in_train <- createDataPartition(train_clean$classe, p=0.70, list=F)
train_data <- train_clean[in_train, ]
test_data <- train_clean[-in_train, ]
control_rf <- trainControl(method="cv", 5)
model_rf <- train(classe ~ ., data=train_data, method="rf", trControl=control_rf, ntree=250)
set.seed(33777) # For reproducibility
in_train <- createDataPartition(train_clean$classe, p=0.70, list=F)
train_data <- train_clean[in_train, ]
test_data <- train_clean[-in_train, ]
control_rf <- trainControl(method="cv", 5)
model_rf <- train(classe ~ ., data=train_data, method="rf", trControl=control_rf, ntree=50)
model_rf
control_rf
train_data
classe
model_rf <- train(classe ~ ., data=train_data, method="rf", trControl=control_rf, ntree=250)
---
title: "Coursera Practical Machine Learning - Course Project Report"
author: "by romkhot"
output:
word_document: default
html_document:
fig_height: 9
fig_width: 9
---
## 1. Introduction
Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement – a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset).
In this project, we will use data from accelerometers of 6 participants to predict the manner in which they did the exercise.
## 2. Data Preprocessing
### 2.1. Load necessary packages
```{r, cache = T}
setwd("D:/DOCs/COURSERA/8 - Practical Machine Learning/Coursera-Machine-Learning-CP")
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(corrplot)
```
### 2.2. Download the Data
```{r, cache = T}
train_file <- "./data/pml-training.csv"
test_file  <- "./data/pml-testing.csv"
if (!file.exists(train_file)) {
download.file( url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile = train_file )
}
if (!file.exists(test_file)) {
download.file( url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
destfile = test_file )
}
```
### 2.3. Getting the raw data
After downloading the data from the data source, we can read the two csv files into two data frames.
```{r, cache = T}
train_raw <- read.csv(train_file)
test_raw <- read.csv(test_file)
dim(train_raw)
dim(test_raw)
#head(train_raw)
#head(test_raw)
```
Each data set contains 160 variables, the "classe" variable of training set is the outcome to predict.
Training data set contains 19622 observations, testing data set contains 20 observations.
### 2.4. Cleansing the data
Clean up the data and remove observations with inappropriate values.
```{r, cache = T}
sum(complete.cases(train_raw))
```
First, let's remove the columns containing NA values.
```{r, cache = T}
train_raw <- train_raw[, colSums(is.na(train_raw)) == 0]
test_raw <- test_raw[, colSums(is.na(test_raw)) == 0]
```
Next, remove some columns that do not contribute much to the measurements.
```{r, cache = T}
classe <- train_raw$classe
#Clean up train set:
train_remove <- grepl("^X|timestamp|window", names(train_raw))
train_raw <- train_raw[, !train_remove]
train_clean <- train_raw[, sapply(train_raw, is.numeric)]
train_clean$classe <- classe
#Clean up test set:
test_remove <- grepl("^X|timestamp|window", names(test_raw))
test_raw <- test_raw[, !test_remove]
test_clean <- test_raw[, sapply(test_raw, is.numeric)]
```
Now, the clean training set contains 19622 observations and 53 variables, the testing set contains 20 observations and 53 variables.
### 2.5. Slice the data
Then, we will split the cleaned training set into a pure training data set (70%) and a validation data set (30%). We will use the validation data set to conduct cross validation in future steps.
```{r, cache = T}
set.seed(33777) # For reproducibility
in_train <- createDataPartition(train_clean$classe, p=0.70, list=F)
train_data <- train_clean[in_train, ]
test_data <- train_clean[-in_train, ]
```
View(train_raw)
#Class factor:
classe<- train_raw$classe
#Clean up train set:
train_remove <- grepl("^X|timestamp|window", names(train_raw))
train_raw <- train_raw[, !train_remove]
train_clean <- train_raw[, sapply(train_raw, is.numeric)]
train_clean$classe <- classe
#Clean up test set:
test_remove <- grepl("^X|timestamp|window", names(test_raw))
test_raw <- test_raw[, !test_remove]
test_clean <- test_raw[, sapply(test_raw, is.numeric)]
set.seed(33777) # For reproducibility
in_train <- createDataPartition(train_clean$classe, p=0.70, list=F)
train_data <- train_clean[in_train, ]
test_data <- train_clean[-in_train, ]
View(train_data)
control_rf <- trainControl(method="cv", 5)
model_rf <- train(classe ~ ., data=train_data, method="rf", trControl=control_rf, ntree=250)
control_rf <- trainControl(method="cv", 5)
control_rf
set.seed(33777) # For reproducibility
in_train <- createDataPartition(train_clean$classe, p=0.70, list=F)
train_data <- train_clean[in_train, ]
test_data <- train_clean[-in_train, ]
control_rf <- trainControl(method="cv", 5)
model_rf <- train( classe ~ ., data = train_data, method = "rf", trControl = control_rf, ntree = 250)
